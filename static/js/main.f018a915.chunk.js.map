{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","react_default","a","createElement","className","alt","src","concat","CardList","pokemons","cardComponent","map","user","i","url","length","slice","parseInt","substring","lastIndexOf","components_Card","key","toUpperCase","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","max","count","_this2","fetch","then","response","json","results","_this$state","filteredPokemons","filter","pokemon","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAaeA,EAXF,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,GACrB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,4EAAAC,OAA8EP,EAA9E,UACtBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKJ,MCmBMS,EAvBE,SAAAV,GAAkB,IAAfW,EAAeX,EAAfW,SACbC,EAAgBD,EAASE,IAAI,SAACC,EAAMC,GACzC,IAAIC,EAAML,EAASI,GAAGC,IACM,MAAxBA,EAAIA,EAAIC,OAAS,KACpBD,EAAMA,EAAIE,MAAM,GAAI,IAErB,IAAMhB,EAAKiB,SAASH,EAAII,UAAUJ,EAAIK,YAAY,KAAK,IACvD,OACClB,EAAAC,EAAAC,cAACiB,EAAD,CACCC,IAAKrB,EACLA,GAAIA,EACJD,KAAMU,EAASI,GAAGd,KAAKuB,kBAK1B,OACCrB,EAAAC,EAAAC,cAAA,WACEO,ICNWa,EAbG,SAAAzB,GAAmCA,EAAhC0B,YAAgC,IAAnBC,EAAmB3B,EAAnB2B,aACjC,OACCxB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVsB,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCECI,EATA,SAACC,GACf,OACC7B,EAAAC,EAAAC,cAAA,OAAK4B,MAAO,CAACC,UAAW,SACrBC,OAAQ,UACTH,EAAMI,WCsDKC,qBArDd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAqBDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SArB1CX,EAAKY,MAAQ,CACZC,IAAK,EACLC,MAAO,EACP1B,YAAa,GACbf,SAAU,IANE2B,mFAUM,IAAAe,EAAAZ,KACnBa,MAAM,gDACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAvD,GAAsB,IAApBoD,EAAoBpD,EAApBoD,MAAOM,EAAa1D,EAAb0D,QACdL,EAAKN,SAAS,CACbI,IAAKC,EACLA,MAAQA,EAAQM,EAAQzC,OACxBN,SAAW+C,uCAUN,IAAAC,EACkClB,KAAKS,MAAvCE,EADAO,EACAP,MAAOzC,EADPgD,EACOhD,SAAWe,EADlBiC,EACkBjC,YAC1B,IAAK0B,EACJ,OACCjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,sBAKH,IAAMuD,EAAkBjD,EAASkD,OAAO,SAAAC,GACvC,OAAOA,EAAQ7D,KAAK8D,cAAcC,SAAStC,EAAYqC,iBAGxD,OACC5D,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,WACAH,EAAAC,EAAAC,cAAC4D,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9B1C,EAAAC,EAAAC,cAAC6D,EAAD,KACC/D,EAAAC,EAAAC,cAAC8D,EAAD,CAAUxD,SAAUiD,aA/CPQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.f018a915.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, id }) => {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='pokemon' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ pokemons }) => {\n\tconst cardComponent = pokemons.map((user, i) => {\n\t\tlet url = pokemons[i].url\n\t\tif (url[url.length - 1] === '/') {\n\t\t\turl = url.slice(0, -1)\n\t\t}\n\t\tconst id = parseInt(url.substring(url.lastIndexOf('/')+1))\n\t\treturn (\n\t\t\t<Card \n\t\t\t\tkey={id}\n\t\t\t\tid={id} \n\t\t\t\tname={pokemons[i].name.toUpperCase()} \n\t\t\t/>\n\t\t);\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search Pokemon' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', \n\t\t\t\t\theight: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n} \n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmax: 0,\n\t\t\tcount: 0,\n\t\t\tsearchfield: '',\n\t\t\tpokemons: [],\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://pokeapi.co/api/v2/pokemon?limit=1000')\n\t\t\t.then(response => response.json())\n\t\t\t.then(({count, results}) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmax: count,\n\t\t\t\t\tcount : count + results.length,\n\t\t\t\t\tpokemons : results\n\t\t\t\t });\n\t\t\t})\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\n\t}\n\n\trender() {\n\t\tconst { count, pokemons , searchfield } = this.state;\n\t\tif (!count) {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1>Loading</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\n\t\tconst filteredPokemons= pokemons.filter(pokemon => {\n\t\t\treturn pokemon.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\n\t\treturn (\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1 className='f1'>Pokedex</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList pokemons={filteredPokemons} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}